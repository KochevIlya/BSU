1. ООП декомпозиция - это концепция, которая представляет собой разбиение сложной системы на более простые и управляемые компоненты. Декомпозиция в ООП осуществляется с использованием объектов и классов. 
Объекты: В ООП объекты представляют экземпляры классов и обладают полями и методами (функциями). Декомпозиция в этом случае означает выделение ключевых объектов, которые представляют собой основные строительные блоки системы.

Классы: Классы определяют общую структуру и поведение объектов. Декомпозиция в ООП также включает создание классов, которые характеризуют различные аспекты функциональности системы.

Инкапсуляция: Это принцип, в соответствии с которым детали реализации объекта скрыты от внешнего мира, и взаимодействие с объектом происходит через его интерфейс. Декомпозиция с использованием инкапсуляции помогает создать модульные и легко поддерживаемые компоненты.

Наследование и полиморфизм: Декомпозиция также может включать в себя использование наследования и полиморфизма для создания иерархии классов.

Применение декомпозиции в ООП упрощает понимание и сопровождение кода, делая его более гибким и масштабируемым. Этот принцип позволяет создавать сложные программные системы, разбивая их на более простые и понятные компоненты.

2. Статический полиморфизм - это одна из форм полиморфизма в программировании, при которой связывание (вызов конкретной функции или метода) происходит на этапе компиляции, а не во время выполнения программы. Он также известен как компиляционный или раннее связывание.

Основной механизм статического полиморфизма - это перегрузка функций или методов. Перегрузка позволяет использовать одно и то же имя для нескольких функций или методов в пределах одного контекста, но с различными параметрами. Компилятор определяет, какая функция будет вызвана, основываясь на типах аргументов, указанных при вызове.

Статический полиморфизм обеспечивает оптимизацию выполнения программы за счет принятия решений на этапе компиляции, но при этом требует статического определения всех возможных вариантов использования функций или методов.

3. Инкапсуляция - это один из основных принципов объектно-ориентированного программирования (ООП). Основная цель инкапсуляции - скрыть внутреннюю реализацию объекта от внешнего мира и предоставить контролируемый интерфейс для взаимодействия с этим объектом.

Основные аспекты инкапсуляции:

Сокрытие данных: Инкапсуляция позволяет ограничивать доступ к данным, предоставляя для этого методы доступа (геттеры и сеттеры). Таким образом, внешний код не может напрямую изменять или читать данные объекта, обеспечивая более безопасное и управляемое взаимодействие.

Сокрытие реализации: Инкапсуляция также позволяет изменять внутреннюю реализацию объекта, не затрагивая внешний код. Это обеспечивает гибкость в разработке, поскольку изменения внутренней структуры не влияют на внешний код, использующий объект.